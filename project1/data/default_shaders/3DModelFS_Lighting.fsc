#version 330 core

out vec4 FragColor;

in vec3 Normal;
in vec3 FragPos;
in vec2 TexCoords;

struct Material{
    sampler2D diffuse0;//we now use diffuse maps(a color of a fragment from the texture we use)
    sampler2D specular0;//specular color for a material
    //the sampler 2D are nothing but textures units
    sampler2D emissive;
    float shininess;
};
struct direcLight{
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    vec3 direction;
};

uniform vec3 viewPos;
uniform Material material;
uniform direcLight dLight;

vec3 OnlyDirecLight(vec3 norm, vec3 viewDir);

void main()
{
    vec3 norm = normalize(Normal);
    vec3 viewDir = normalize(viewPos - FragPos);//direction vector from the fragment position to the camera
    
    vec3 result = OnlyDirecLight(norm, viewDir);

    FragColor = vec4(result, 1.0);
}

vec3 OnlyDirecLight(vec3 norm, vec3 viewDir){
    vec3 lightDir = normalize(-dLight.direction);

    //DIFFUSE
    //dot product to find the diffuse value of fragment
    //greater the angle, smaller the value of diffuse value hence darker
    float diffuseStrength = max(dot(norm, lightDir), 0.0);//returns max values 
    //between dot product and 0.0, as sometimes the angle between becomes greater than 90 giving us -ve values

    //SPECULAR
    vec3 reflectDir = reflect(-lightDir, norm);//reflects the -ve incident ray about the normal vector

    vec3 diffuse = diffuseStrength * vec3(texture(material.diffuse0, TexCoords))* dLight.diffuse;//we use diffuse colors for bothe vec3 ambient and vec3 diffuse
    vec3 ambient = vec3(texture(material.diffuse0, TexCoords)) * dLight.ambient;
    vec3 emission = vec3(texture(material.emissive, TexCoords));

    //we use sampler2D texture to specify which texture unit to use
    vec3 specular;

    float spec = pow(max(dot(viewDir, reflectDir), 0.0f), material.shininess);
    specular = spec * vec3(texture(material.specular0, TexCoords)) * dLight.specular;

    return (diffuse + specular + ambient + 0.25*emission);
}